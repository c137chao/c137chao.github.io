<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cs144s on Summer Blog Space</title>
    <link>http://c137chao.github.io/cs144/</link>
    <description>Recent content in Cs144s on Summer Blog Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://c137chao.github.io/cs144/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cs144 自己动手实现tcp协议 lab0</title>
      <link>http://c137chao.github.io/cs144/lab-0-networking-warmup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/lab-0-networking-warmup/</guid>
      <description>lab 0 : Networking warmup 2.1 Fetch a Web page http://cs144.keithw.org/hello
第一个练习就是跟着指导书使用telnet获取页面 照着实验指导书做就行了，注意连接过一会儿就会自动关闭，所以需要一点手速。 敲完命令按两次回车(有一个空行)
 talent 目标网址  &amp;gt; telnet cs144.keithw.org http Trying 104.196.238.229... Connected to cs144.keithw.org. Escape character is &#39;^]&#39;.  发送 http 报文  GET /hello HTTP/1.1 Host: cs144.keithw.org Connection: close  结果  HTTP/1.1 200 OK Date: Wed, 02 Mar 2022 06:07:39 GMT Server: Apache Last-Modified: Thu, 13 Dec 2018 15:45:29 GMT ETag: &amp;quot;e-57ce93446cb64&amp;quot; Accept-Ranges: bytes Content-Length: 14 Connection: close Content-Type: text/plain Hello, CS144!</description>
    </item>
    
    <item>
      <title>cs144 自己动手实现tcp协议 lab1</title>
      <link>http://c137chao.github.io/cs144/lab-1-streamreassembler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/lab-1-streamreassembler/</guid>
      <description>lab 1 StreamReassembler 实验指导书传送门
这幅图描述了TCP的基本工作原理，也是接下来四次实验我们要做的内容。
// 待补充
TCP需要将上层传下来的 packet 拆分成一个一个 segment（因为TCP依赖于他的下一层IP，而网络层的传输有物理限制，需要对datagram的大小作出约定1460 byte），拆分后的 segment 可能不能够按照原来的顺序到达目的地，也可能由于网络状况问题出现重传或者丢失。
lab1 中我们需要做的就是在接收端收到这些 segment 后，将他们重组。 虽然是lab 1，但做的过程中也遇到不少问题
主要棘手的问题就是，收到的 segment 可能有很多重复的部分，并且他们又不按顺序到达。 要考虑周全。
关于调试 因为数据到达的情况复杂，一开始很难全部考虑到，可以一边看测试结果一边修改. 细节有很多，调试也许会有所帮助。
// int build directory cmake .. -DCMAKE BUILD TYPE=Debug make gdb tests/想要调试的文件名 就可以进入gdb调试了
实验内容 核心就是 使用一个 map 来缓存那些未重组的 segment，根据自己的实现增且相应的成员记录。
class StreamReassembler { private: // Your code here -- add private members as necessary.  std::map&amp;lt;size_t, std::string&amp;gt; _reassemble_buffer; //... some other member if you need public: // .</description>
    </item>
    
    <item>
      <title>cs144 自己动手实现tcp协议 lab2</title>
      <link>http://c137chao.github.io/cs144/lab-2-tcp-receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/lab-2-tcp-receiver/</guid>
      <description>若 make 报错
LIBPCAP linked by target &amp;quot;tcp_parser&amp;quot; in directory /home/zc/2022/sponge/tests linked by target &amp;quot;tcp_parser&amp;quot; in directory /home/zc/2022/sponge/tests 解决办法 sudo apt-get install libpcap-dev
热身 开始有两个热身，上个实验 reassemble_stream 收到的数据全是从 0 （absolute seqno）开始的，并且 序号是使用一个64位数字去表示的，现在要做两件事：
  把absolute seq （64b start with 0）转换成 seq （32b，从一个随机的 isn 开始） WrappingInt32 wrap(uint64 t absolute_seq, WrappingInt32 isn)
  恰好反过来，将 32 位的 seq 转化为 64 位的 absolute seq `unwrap(WrappingInt32 seq, WrappingInt32 isn, uint64 t checkpoint)
  有四个测试是针对 wrap 和 unwrap 的 通过了这四个再往下进行。</description>
    </item>
    
    <item>
      <title>cs144 自己动手实现tcp协议 lab3</title>
      <link>http://c137chao.github.io/cs144/lab-3-tcp-sender/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/lab-3-tcp-sender/</guid>
      <description>TCP Sender 到 lab 3为止，现在 tcp 的工作流程是：
 上层应用通过 发送/接收窗口（ByteStream）与TCP进行数据交换。 发送方应用层应用将数据（message）有序写入bytestream tcp 发送端从 ByteStream 读取数据将其封装为 segment 经过底层网络发送至接收方 由于底层网络不保证数据能够可靠到达，发送方需要对丢失的数据重传，接收方需要对接收到的数据确认和重组 tcp 接收端将重组完成的数据写入到ByteStream 被上层应用读走。  剩下的就是面向测试编程
lab3 中我们所关心的几个点 发送方需要根据接收方发送来的 ack_no 和 windows size 来决定是否可以抛弃以前的数据以及还能发送多少数据。 对于重传，使用 alarm 函数发生时钟中断，来调用 tick
signal(SIGALRM, tick); alarm(clock); 关于 alarm，回顾CSAPP异常处理 或者 6.s081 的 lab 4:alarm。
状态图是开启代码思路的关键
namespace TCPSenderStateSummary { const std::string ERROR = &amp;#34;error (connection was reset)&amp;#34;; const std::string CLOSED = &amp;#34;waiting for stream to begin (no SYN sent)&amp;#34;; const std::string SYN_SENT = &amp;#34;stream started but nothing acknowledged&amp;#34;; const std::string SYN_ACKED = &amp;#34;stream ongoing&amp;#34;; const std::string FIN_SENT = &amp;#34;stream finished (FIN sent) but not fully acknowledged&amp;#34;; const std::string FIN_ACKED = &amp;#34;stream finished and fully acknowledged&amp;#34;; } string TCPState::state_summary(const TCPSender &amp;amp;sender) { if (sender.</description>
    </item>
    
    <item>
      <title>cs144 自己动手实现tcp协议 lab4</title>
      <link>http://c137chao.github.io/cs144/lab-4-tcp-connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/lab-4-tcp-connection/</guid>
      <description>lab 4 TCP 完全体 到现在 tcp 需要的所有组件已经完成  //! \struct TCPHeader //! ~~~{.txt} //! 0 1 2 3 //! 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 //! +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ //! | Source Port | Destination Port | //! +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ //! | Sequence Number | //! +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ //!</description>
    </item>
    
    <item>
      <title>计算机网络 第三章 传输层</title>
      <link>http://c137chao.github.io/cs144/chapter3-transmission-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/chapter3-transmission-layer/</guid>
      <description>transport layer 为不同主机的进程提供 逻辑通信
TCP: Transmission Control Protocol • reliable, in-order delivery • congestion control • flow control • connection setup
UDP: User Datagram Protocol • unreliable, unordered delivery • no-frills extension of “best-effort” IP
1. 多路复用/多路分解 通过套接字，将同一主机上的不同进程准确交付
import socket HOSt = &amp;#39;data.pr4e.com&amp;#39; # it will be translated to ip add through DNS PORT = 80 # HTTP port number mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # create a socket mysock.connect((HOST, PORT)) # request connection cmd = &amp;#39;GET http://data.</description>
    </item>
    
    <item>
      <title>计算机网络 第六章 链路层</title>
      <link>http://c137chao.github.io/cs144/chapter6-link-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/chapter6-link-layer/</guid>
      <description>基本术语： Node: 运行链路层协议的任何设备均称为Node Link: 相邻节点间的通信信道成为 链路 Link
1. 链路层提供的服务  成帧（framing)：加首加尾 链路接入：MAC 媒体访问控制协议 可靠交付： 差错检测和纠正：奇偶校验， CRC 循环冗余校验  差错检测 （1）奇偶校验码 （2）CRC循环冗余校验 2 多路访问协议 链路层有两种网络链路：点对点链路 和 广播链路 点对点链路由单个发送方和单个接收方组成
点对点协议 PPP 帧格式：  标志字段 F= 0x7E （01111110，表示帧的开始） 地址字段 A= 0xFF 用于指定那个站正在处理，0xFF（所有站） 控制字段 C：PPP中没有使用 通常为 0x03， 协议字段  填充方式： 零比特填充(5 个连续的 1 填入一个 0)
广播信道的多路访问协议： （1）信道划分协议（channel partitioning protocal） （2）随机接入协议（random access protocal） （3）轮转令牌协议（taking-turns protocal）
信道划分协议 （1）时分多路复用 TDM TDM 将时间华为分为时间帧，并进一步把每个时间帧分为 N 个时隙（slot)，每个节点分得一个时隙 （2）频分多路复用 FDM 与 TDM 类似，不过 FDM 是根据波段分配 !</description>
    </item>
    
    <item>
      <title>计算机网络 第四章 网络层</title>
      <link>http://c137chao.github.io/cs144/chapter4-network-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://c137chao.github.io/cs144/chapter4-network-layer/</guid>
      <description>网络层 网络层提供无连接的、尽最大努力交付的服务
1. IPV4 Datagram 格式  version : 网络协议版本 ipv4 or ipv6 Header Length: 首部长度，通常为 20 Bytes TOS: 服务类型，如实时（网络电话）/非实时（文件传输FTP） Length: IP datagram 的总长度(包括 header length)，由于物理限制，一般不能超过 1500 Bytes Identifier, flags, fragment offset : 与数据分片有关 TTL: 该 datagram 的寿命，若 TTL 减为 0，将被丢弃 Protocal：上层协议（6表示TCP，17表示UDP)，是将网络层和传输层绑定到一起的粘合剂 Checksum：仅仅是 hearder 的 checksum，TCP/UDP是对整个segment (header + payload)做检验 Source/Destination IP Address：发送方/接收方的 IP 地址  2. 数据报分片（datagram fragmentation） 由于链路层的限制，IP datagram 不能超过 最大传输单元（MTU)，当 IP datagram 过大，需要进行分片，所有分片拥有相同的 identifier
3. IP 地址 与 子网划分  三类地址划分 前缀 CIDR  4.</description>
    </item>
    
  </channel>
</rss>
